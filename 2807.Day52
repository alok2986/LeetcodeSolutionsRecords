
2807. Insert Greatest Common Divisors in Linked List
Solved
Medium
Topics
Companies
Given the head of a linked list head, in which each node contains an integer value.

Between every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them.

Return the linked list after insertion.

The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.

 

Example 1:


Input: head = [18,6,10,3]
Output: [18,6,6,2,10,1,3]
Explanation: The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes).
- We insert the greatest common divisor of 18 and 6 = 6 between the 1st and the 2nd nodes.
- We insert the greatest common divisor of 6 and 10 = 2 between the 2nd and the 3rd nodes.
- We insert the greatest common divisor of 10 and 3 = 1 between the 3rd and the 4th nodes.
There are no more adjacent nodes, so we return the linked list.
Example 2:


Input: head = [7]
Output: [7]
Explanation: The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes.
There are no pairs of adjacent nodes, so we return the initial linked list.
 

Constraints:

The number of nodes in the list is in the range [1, 5000].
1 <= Node.val <= 1000


CODE:
import java.util.*;

// Definition for singly-linked list.
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
    
    // Method to deserialize a string into a ListNode linked list
    public static ListNode deserialize(String data) {
        if (data == null || data.equals("[]")) {
            return null;
        }

        String[] nodes = data.replace("[", "").replace("]", "").split(",");
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        
        for (String node : nodes) {
            current.next = new ListNode(Integer.parseInt(node.trim()));
            current = current.next;
        }

        return dummy.next;  // Return the actual head of the linked list
    }

    // Method to serialize a ListNode linked list into a string
    public static String serialize(ListNode head) {
        if (head == null) {
            return "[]";
        }
        
        StringBuilder sb = new StringBuilder();
        ListNode current = head;
        
        sb.append("[");
        while (current != null) {
            sb.append(current.val);
            if (current.next != null) {
                sb.append(",");
            }
            current = current.next;
        }
        sb.append("]");
        
        return sb.toString();
    }
}

class Solution {
    public ListNode insertGreatestCommonDivisors(ListNode head) {
        // If the list has only one node, return it directly
        if (head == null || head.next == null) {
            return head;
        }
        
        // Pointer to the current node
        ListNode current = head;
        
        // Traverse the linked list
        while (current != null && current.next != null) {
            // Calculate GCD of current node's value and next node's value
            int gcdVal = gcd(current.val, current.next.val);
            
            // Create a new node with the GCD value
            ListNode newNode = new ListNode(gcdVal);
            
            // Insert the new node between current and next node
            newNode.next = current.next;
            current.next = newNode;
            
            // Move to the next pair (skip the newly inserted node)
            current = newNode.next;
        }
        
        // Return the modified head of the list
        return head;
    }

    // Helper function to compute GCD using Euclidean algorithm
    private int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
    
    public static void main(String[] args) {
        // Example usage
        String input = "[18,6,10,3]";
        ListNode head = ListNode.deserialize(input);
        
        Solution sol = new Solution();
        ListNode modifiedList = sol.insertGreatestCommonDivisors(head);
        
        String output = ListNode.serialize(modifiedList);
        System.out.println(output);  // Output should be: [18,6,6,2,10,1,3]
    }
}
