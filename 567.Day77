567. Permutation in String
Medium
Topics
Companies
Hint
Given two strings s1 and s2, return true if s2 contains a 
permutation
 of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.


CODE
public class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int n1 = s1.length();
        int n2 = s2.length();
        
        // If s1 is longer than s2, it is impossible to find a permutation
        if (n1 > n2) return false;
        
        // Arrays to store character counts for s1 and the sliding window in s2
        int[] s1Count = new int[26];
        int[] windowCount = new int[26];
        
        // Fill the character count array for s1
        for (int i = 0; i < n1; i++) {
            s1Count[s1.charAt(i) - 'a']++;
            windowCount[s2.charAt(i) - 'a']++;
        }
        
        // Now start sliding the window over s2
        for (int i = n1; i < n2; i++) {
            // Check if the window's character frequencies match s1's
            if (matches(s1Count, windowCount)) {
                return true;
            }
            
            // Slide the window: remove the leftmost character and add the new character
            windowCount[s2.charAt(i - n1) - 'a']--;
            windowCount[s2.charAt(i) - 'a']++;
        }
        
        // Check the last window
        return matches(s1Count, windowCount);
    }
    
    // Helper function to check if two character count arrays are the same
    private boolean matches(int[] s1Count, int[] windowCount) {
        for (int i = 0; i < 26; i++) {
            if (s1Count[i] != windowCount[i]) {
                return false;
            }
        }
        return true;
    }
}

