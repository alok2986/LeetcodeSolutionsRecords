2707. Extra Characters in a String
Medium
Topics
Companies
Hint
You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings.

Return the minimum number of extra characters left over if you break up s optimally.

 

Example 1:

Input: s = "leetscode", dictionary = ["leet","code","leetcode"]
Output: 1
Explanation: We can break s in two substrings: "leet" from index 0 to 3 and "code" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.

Example 2:

Input: s = "sayhelloworld", dictionary = ["hello","world"]
Output: 3
Explanation: We can break s in two substrings: "hello" from index 3 to 7 and "world" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.
 

Constraints:

1 <= s.length <= 50
1 <= dictionary.length <= 50
1 <= dictionary[i].length <= 50
dictionary[i] and s consists of only lowercase English letters
dictionary contains distinct words

CODE:
import java.util.*;

class Solution {
    public int minExtraChar(String s, String[] dictionary) {
        int n = s.length();
        // dp[i] represents the minimum extra characters for substring s[0:i]
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;  // Base case: no characters, no extra characters.

        Set<String> dictSet = new HashSet<>(Arrays.asList(dictionary));  // Convert dictionary array to a set for fast lookup.

        // Iterate through all substrings of s.
        for (int i = 1; i <= n; i++) {
            // Case 1: Assume the character s[i-1] is an extra character.
            dp[i] = dp[i - 1] + 1;

            // Case 2: Try to match a word from the dictionary that ends at index i-1.
            for (int j = i - 1; j >= 0; j--) {
                String substring = s.substring(j, i);
                if (dictSet.contains(substring)) {
                    dp[i] = Math.min(dp[i], dp[j]);  // No extra characters for a valid match.
                }
            }
        }

        // Return the minimum extra characters for the entire string.
        return dp[n];
    }
}
