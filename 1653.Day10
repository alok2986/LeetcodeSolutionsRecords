1653. Minimum Deletions to Make String Balanced
Medium
Topics
Companies
Hint
You are given a string s consisting only of characters 'a' and 'b'​​​​.

You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.

Return the minimum number of deletions needed to make s balanced.

 

Example 1:

Input: s = "aababbab"
Output: 2
Explanation: You can either:
Delete the characters at 0-indexed positions 2 and 6 ("aababbab" -> "aaabbb"), or
Delete the characters at 0-indexed positions 3 and 6 ("aababbab" -> "aabbbb").
Example 2:

Input: s = "bbaaaaabb"
Output: 2
Explanation: The only solution is to delete the first two characters.
 

Constraints:

1 <= s.length <= 105
s[i] is 'a' or 'b'​​.


CODE:
public class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();
        int right_a_count = 0, left_b_count = 0;

        // Initialize right_a_count with total number of 'a's in the string
        for (char c : s.toCharArray()) {
            if (c == 'a') {
                right_a_count++;
            }
        }

        int minDeletions = right_a_count; // Initial assumption: remove all 'a's

        for (char c : s.toCharArray()) {
            if (c == 'a') {
                right_a_count--;
            } else {
                left_b_count++;
            }
            // Minimum deletions to make all 'a's before index and 'b's after
            minDeletions = Math.min(minDeletions, left_b_count + right_a_count);
        }

        return minDeletions;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println(sol.minimumDeletions("aababbab")); // Output: 2
        System.out.println(sol.minimumDeletions("bbaaaaabb")); // Output: 2
    }
}

