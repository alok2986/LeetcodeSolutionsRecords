440. K-th Smallest in Lexicographical Order
Hard
Topics
Companies
Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].

 

Example 1:

Input: n = 13, k = 2
Output: 10
Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.
Example 2:

Input: n = 1, k = 1
Output: 1
 

Constraints:

1 <= k <= n <= 109

CODE:
public class Solution {
    public int findKthNumber(int n, int k) {
        int curr = 1;  // Start from 1, the smallest lexicographical number
        k--;  // We are looking for the k-th number, but we already count '1', so decrement k
        
        while (k > 0) {
            long steps = calculateSteps(n, curr, curr + 1);  // Count the steps between `curr` and `curr + 1`
            if (steps <= k) {
                // If there are fewer or exactly `k` numbers in this subtree, move to the next sibling
                curr++;
                k -= steps;
            } else {
                // If the k-th number is in the current subtree, move down to the next level
                curr *= 10;
                k--;  // We count the current number
            }
        }
        
        return curr;
    }
    
    // Function to calculate how many numbers exist in the subtree rooted at `curr` and before `next`
    private long calculateSteps(int n, long curr, long next) {
        long steps = 0;
        while (curr <= n) {
            steps += Math.min(n + 1, next) - curr;  // Count the steps between `curr` and `next`
            curr *= 10;
            next *= 10;
        }
        return steps;
    }
}
