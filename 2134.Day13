
2134. Minimum Swaps to Group All 1's Together II
Medium
Topics
Companies
Hint
A swap is defined as taking two distinct positions in an array and swapping the values in them.

A circular array is defined as an array where we consider the first element and the last element to be adjacent.

Given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.

 

Example 1:

Input: nums = [0,1,0,1,1,0,0]
Output: 1
Explanation: Here are a few of the ways to group all the 1's together:
[0,0,1,1,1,0,0] using 1 swap.
[0,1,1,1,0,0,0] using 1 swap.
[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).
There is no way to group all 1's together with 0 swaps.
Thus, the minimum number of swaps required is 1.
Example 2:

Input: nums = [0,1,1,1,0,0,1,1,0]
Output: 2
Explanation: Here are a few of the ways to group all the 1's together:
[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).
[1,1,1,1,1,0,0,0,0] using 2 swaps.
There is no way to group all 1's together with 0 or 1 swaps.
Thus, the minimum number of swaps required is 2.
Example 3:

Input: nums = [1,1,0,0,1]
Output: 0
Explanation: All the 1's are already grouped together due to the circular property of the array.
Thus, the minimum number of swaps required is 0.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.


CODE: 
public class Solution {
    public int minSwaps(int[] nums) {
        int numOnes = 0;
        
        // Step 1: Count the total number of 1's in the array
        for (int num : nums) {
            if (num == 1) {
                numOnes++;
            }
        }

        if (numOnes == 0) {
            return 0; // No 1's to group
        }

        // Step 2: Create the extended array
        int n = nums.length;
        int[] extendedNums = new int[2 * n];
        System.arraycopy(nums, 0, extendedNums, 0, n);
        System.arraycopy(nums, 0, extendedNums, n, n);

        // Step 3: Use sliding window to find the minimum swaps
        int minSwaps = Integer.MAX_VALUE;
        int currentZeros = 0;

        // Initialize the first window
        for (int i = 0; i < numOnes; i++) {
            if (extendedNums[i] == 0) {
                currentZeros++;
            }
        }
        minSwaps = currentZeros;

        // Slide the window over the extended array
        for (int i = numOnes; i < 2 * n; i++) {
            if (extendedNums[i - numOnes] == 0) {
                currentZeros--;
            }
            if (extendedNums[i] == 0) {
                currentZeros++;
            }
            minSwaps = Math.min(minSwaps, currentZeros);
        }

        return minSwaps;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] nums1 = {0, 1, 0, 1, 1, 0, 0};
        System.out.println(sol.minSwaps(nums1)); // Output: 1

        int[] nums2 = {0, 1, 1, 1, 0, 0, 1, 1, 0};
        System.out.println(sol.minSwaps(nums2)); // Output: 2

        int[] nums3 = {1, 1, 0, 0, 1};
        System.out.println(sol.minSwaps(nums3)); // Output: 0
    }
}
