719. Find K-th Smallest Pair Distance
Hard
Topics
Companies
Hint
The distance of a pair of integers a and b is defined as the absolute difference between a and b.

Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

 Example 1:

Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
Example 2:

Input: nums = [1,1,1], k = 2
Output: 0
Example 3:

Input: nums = [1,6,1], k = 3
Output: 5
 

Constraints:

n == nums.length
2 <= n <= 104
0 <= nums[i] <= 106
1 <= k <= n * (n - 1) / 2

CODE:
import java.util.Arrays;

public class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        // Sort the array to simplify distance calculation
        Arrays.sort(nums);
        
        // Define the binary search range
        int left = 0;
        int right = nums[nums.length - 1] - nums[0];
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (countPairs(nums, mid) < k) {
                left = mid + 1; // Increase the distance because we need more pairs
            } else {
                right = mid; // Decrease the distance to find the k-th smallest
            }
        }
        
        return left;
    }
    
    private int countPairs(int[] nums, int distance) {
        int count = 0;
        int left = 0;
        
        // Two-pointer technique to count pairs with distance <= `distance`
        for (int right = 0; right < nums.length; right++) {
            while (nums[right] - nums[left] > distance) {
                left++;
            }
            count += right - left;
        }
        
        return count;
    }
}

