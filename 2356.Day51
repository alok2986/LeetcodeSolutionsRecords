2326. Spiral Matrix IV
Medium
Topics
Companies
Hint
You are given two integers m and n, which represent the dimensions of a matrix.

You are also given the head of a linked list of integers.

Generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.

Return the generated matrix.

 

Example 1:


Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]
Output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
Explanation: The diagram above shows how the values are printed in the matrix.
Note that the remaining spaces in the matrix are filled with -1.
Example 2:


Input: m = 1, n = 4, head = [0,1,2]
Output: [[0,1,2,-1]]
Explanation: The diagram above shows how the values are printed from left to right in the matrix.
The last space in the matrix is set to -1.
 

Constraints:

1 <= m, n <= 105
1 <= m * n <= 105
The number of nodes in the list is in the range [1, m * n].
0 <= Node.val <= 1000

Code:
class ListNode {
    int val;
    ListNode next;
    
    ListNode(int val) {
        this.val = val;
        this.next = null;
    }

    // Method to deserialize a string into a ListNode linked list
    public static ListNode deserialize(String s) {
        if (s == null || s.length() == 0 || s.equals("[]")) {
            return null; // If input string is empty or just "[]", return null
        }

        // Remove brackets and trim any leading/trailing spaces
        s = s.replaceAll("\\[|\\]", "").trim();
        
        // Split the string by commas and ignore any empty strings
        String[] values = s.split(",");
        
        if (values.length == 0) {
            return null;
        }

        ListNode dummy = new ListNode(0); // Dummy node to simplify the logic
        ListNode current = dummy;

        for (String value : values) {
            value = value.trim();  // Trim any whitespace from the value
            if (!value.isEmpty()) {
                current.next = new ListNode(Integer.parseInt(value));
                current = current.next;
            }
        }

        return dummy.next; // Return the actual head (skip dummy)
    }

    // Helper method to print the linked list (for debugging)
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        ListNode current = this;
        while (current != null) {
            sb.append(current.val).append(" -> ");
            current = current.next;
        }
        sb.append("null");
        return sb.toString();
    }
}

public class Solution {
    public int[][] spiralMatrix(int m, int n, ListNode head) {
        int[][] matrix = new int[m][n];
        
        // Initialize all cells in the matrix with -1
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = -1;
            }
        }

        // Define the boundaries for the spiral
        int top = 0, bottom = m - 1, left = 0, right = n - 1;
        
        ListNode current = head;
        
        // Traverse the matrix in spiral order
        while (current != null && top <= bottom && left <= right) {
            // Traverse from left to right on the top row
            for (int i = left; i <= right && current != null; i++) {
                matrix[top][i] = current.val;
                current = current.next;
            }
            top++; // move the top boundary down
            
            // Traverse from top to bottom on the right column
            for (int i = top; i <= bottom && current != null; i++) {
                matrix[i][right] = current.val;
                current = current.next;
            }
            right--; // move the right boundary left
            
            // Traverse from right to left on the bottom row
            for (int i = right; i >= left && current != null; i--) {
                matrix[bottom][i] = current.val;
                current = current.next;
            }
            bottom--; // move the bottom boundary up
            
            // Traverse from bottom to top on the left column
            for (int i = bottom; i >= top && current != null; i--) {
                matrix[i][left] = current.val;
                current = current.next;
            }
            left++; // move the left boundary right
        }
        
        return matrix;
    }
}
