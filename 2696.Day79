2696. Minimum String Length After Removing Substrings
Easy
Topics
Companies
Hint
You are given a string s consisting only of uppercase English letters.

You can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings "AB" or "CD" from s.

Return the minimum possible length of the resulting string that you can obtain.

Note that the string concatenates after removing the substring and could produce new "AB" or "CD" substrings.

 

Example 1:

Input: s = "ABFCACDB"
Output: 2
Explanation: We can do the following operations:
- Remove the substring "ABFCACDB", so s = "FCACDB".
- Remove the substring "FCACDB", so s = "FCAB".
- Remove the substring "FCAB", so s = "FC".
So the resulting length of the string is 2.
It can be shown that it is the minimum length that we can obtain.
Example 2:

Input: s = "ACBBD"
Output: 5
Explanation: We cannot do any operations on the string so the length remains the same.
 

Constraints:

1 <= s.length <= 100
s consists only of uppercase English letters.


CODE
public class Solution {
    public int minLength(String s) {
        // Use a stack to store characters after checking for "AB" and "CD"
        Stack<Character> stack = new Stack<>();
        
        for (char c : s.toCharArray()) {
            if (!stack.isEmpty()) {
                char top = stack.peek();
                
                // If we find an "AB" or "CD", pop the top and skip the current character
                if (top == 'A' && c == 'B') {
                    stack.pop();
                } else if (top == 'C' && c == 'D') {
                    stack.pop();
                } else {
                    // Otherwise, push the current character onto the stack
                    stack.push(c);
                }
            } else {
                // If stack is empty, simply push the current character
                stack.push(c);
            }
        }
        
        // The size of the stack is the minimum possible length of the string
        return stack.size();
    }
}
