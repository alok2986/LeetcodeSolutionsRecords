1545. Find Kth Bit in Nth Binary String
Medium
Topics
Companies
Hint
Given two positive integers n and k, the binary string Sn is formed as follows:

S1 = "0"
Si = Si - 1 + "1" + reverse(invert(Si - 1)) for i > 1
Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first four strings in the above sequence are:

S1 = "0"
S2 = "011"
S3 = "0111001"
S4 = "011100110110001"
Return the kth bit in Sn. It is guaranteed that k is valid for the given n.

 

Example 1:

Input: n = 3, k = 1
Output: "0"
Explanation: S3 is "0111001".
The 1st bit is "0".
Example 2:

Input: n = 4, k = 11
Output: "1"
Explanation: S4 is "011100110110001".
The 11th bit is "1".
 

Constraints:

1 <= n <= 20
1 <= k <= 2n - 1


CODE:
public class Solution {
    public char findKthBit(int n, int k) {
        return findKthBitHelper(n, k);
    }

    private char findKthBitHelper(int n, int k) {
        if (n == 1) {
            return '0';  // Base case, S1 = "0"
        }
        
        int mid = (1 << (n - 1));  // 2^(n-1), the middle position
        
        if (k == mid) {
            return '1';  // The middle element is always '1'
        } else if (k < mid) {
            // k is in the first half, same as the k-th bit in S_{n-1}
            return findKthBitHelper(n - 1, k);
        } else {
            // k is in the second half, mirrored position in S_{n-1}
            int mirroredK = 2 * mid - k;  // Mirror position in the first half
            char mirroredBit = findKthBitHelper(n - 1, mirroredK);
            return invert(mirroredBit);  // Invert the mirrored bit
        }
    }

    private char invert(char bit) {
        return bit == '0' ? '1' : '0';
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.findKthBit(3, 1));  // Output: "0"
        System.out.println(solution.findKthBit(4, 11));  // Output: "1"
    }
}
