632. Smallest Range Covering Elements from K Lists
Hard
Topics
Companies
You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:

Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Example 2:

Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
 

Constraints:

nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-105 <= nums[i][j] <= 105
nums[i] is sorted in non-decreasing order.


CODE:
import java.util.PriorityQueue;

public class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        // Min-heap to store elements as (value, row, col)
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        
        int max = Integer.MIN_VALUE; // Max element in the current window
        int rangeStart = 0, rangeEnd = Integer.MAX_VALUE; // Best range
        
        // Step 1: Initialize the heap with the first element of each list
        for (int i = 0; i < nums.size(); i++) {
            int value = nums.get(i).get(0);
            minHeap.offer(new int[]{value, i, 0}); // {value, row, col}
            max = Math.max(max, value); // Update the max with the first elements
        }
        
        // Step 2: Process the heap
        while (minHeap.size() == nums.size()) {
            int[] current = minHeap.poll();
            int value = current[0], row = current[1], col = current[2];
            
            // Step 3: Update the range if this is a smaller range
            if (max - value < rangeEnd - rangeStart) {
                rangeStart = value;
                rangeEnd = max;
            }
            
            // Step 4: Move to the next element in the same row
            if (col + 1 < nums.get(row).size()) {
                int nextValue = nums.get(row).get(col + 1);
                minHeap.offer(new int[]{nextValue, row, col + 1});
                max = Math.max(max, nextValue); // Update the max element
            } else {
                // If one of the lists is exhausted, break the loop
                break;
            }
        }
        
        return new int[]{rangeStart, rangeEnd};
    }
}
