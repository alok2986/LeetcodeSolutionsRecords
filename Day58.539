539. Minimum Time Difference
Medium
Topics
Companies
Given a list of 24-hour clock time points in "HH:MM" format, return the minimum minutes difference between any two time-points in the list.
 

Example 1:

Input: timePoints = ["23:59","00:00"]
Output: 1
Example 2:

Input: timePoints = ["00:00","23:59","00:00"]
Output: 0
 

Constraints:

2 <= timePoints.length <= 2 * 104
timePoints[i] is in the format "HH:MM".


CODE:
import java.util.Collections;
import java.util.List;

public class Solution {
    public int findMinDifference(List<String> timePoints) {
        // Step 1: Convert all time points to minutes
        List<Integer> minutesList = new ArrayList<>();
        for (String time : timePoints) {
            String[] parts = time.split(":");
            int hours = Integer.parseInt(parts[0]);
            int minutes = Integer.parseInt(parts[1]);
            minutesList.add(hours * 60 + minutes);
        }
        
        // Step 2: Sort the list of time in minutes
        Collections.sort(minutesList);
        
        // Step 3: Initialize minDifference to a large number
        int minDifference = Integer.MAX_VALUE;
        
        // Step 4: Find the minimum difference between consecutive time points
        for (int i = 1; i < minutesList.size(); i++) {
            minDifference = Math.min(minDifference, minutesList.get(i) - minutesList.get(i - 1));
        }
        
        // Step 5: Check the circular difference (first and last time point)
        int circularDifference = (1440 - minutesList.get(minutesList.size() - 1)) + minutesList.get(0);
        minDifference = Math.min(minDifference, circularDifference);
        
        // Step 6: Return the minimum difference
        return minDifference;
    }
}
