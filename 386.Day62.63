386. Lexicographical Numbers
Medium
Topics
Companies
Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.

You must write an algorithm that runs in O(n) time and uses O(1) extra space. 

 

Example 1:

Input: n = 13
Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]
Example 2:

Input: n = 2
Output: [1,2]
 

Constraints:

1 <= n <= 5 * 104

Seen this question in a real interview before?
1/5
Yes
No
Accepted
211.2K
Submissions
296.4K
Acceptance Rate
71.2%
Topics
Companies
Discussion (108)

CODE:
import java.util.*;

public class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> result = new ArrayList<>();
        // Start with the first digit 1 to 9
        for (int i = 1; i <= 9; i++) {
            dfs(i, n, result);
        }
        return result;
    }
    
    private void dfs(int curr, int n, List<Integer> result) {
        // If the current number is greater than n, stop the recursion
        if (curr > n) {
            return;
        }
        
        // Add the current number to the result
        result.add(curr);
        
        // Try to append digits 0-9 to the current number (curr)
        for (int i = 0; i <= 9; i++) {
            int next = curr * 10 + i;
            if (next > n) {
                return;
            }
            dfs(next, n, result);
        }
    }
}
