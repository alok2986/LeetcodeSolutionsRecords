3217. Delete Nodes From Linked List Present in Array
Medium
Topics
Companies
Hint
You are given an array of integers nums and the head of a linked list. Return the head of the modified linked list after removing all nodes from the linked list that have a value that exists in nums.

 

Example 1:

Input: nums = [1,2,3], head = [1,2,3,4,5]

Output: [4,5]

Explanation:



Remove the nodes with values 1, 2, and 3.

Example 2:

Input: nums = [1], head = [1,2,1,2,1,2]

Output: [2,2,2]

Explanation:



Remove the nodes with value 1.

Example 3:

Input: nums = [5], head = [1,2,3,4]

Output: [1,2,3,4]

Explanation:



No node has value 5.

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105
All elements in nums are unique.
The number of nodes in the given list is in the range [1, 105].
1 <= Node.val <= 105
The input is generated such that there is at least one node in the linked list that has a value not present in nums.


CODE:
import java.util.HashSet;
import java.util.Set;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; this.next = null; }
}

public class Solution {
    public ListNode deleteNodes(ListNode head, int[] nums) {
        // Step 1: Store nums in a HashSet for O(1) lookups
        Set<Integer> toDelete = new HashSet<>();
        for (int num : nums) {
            toDelete.add(num);
        }

        // Step 2: Handle the case where the head itself needs to be deleted
        while (head != null && toDelete.contains(head.val)) {
            head = head.next;  // Move the head pointer to the next node
        }

        // If after removing from the head, we have no nodes left
        if (head == null) {
            return null;
        }

        // Step 3: Traverse the list and delete necessary nodes
        ListNode current = head;
        while (current != null && current.next != null) {
            if (toDelete.contains(current.next.val)) {
                current.next = current.next.next;  // Skip the next node
            } else {
                current = current.next;  // Move to the next node
            }
        }

        // Step 4: Return the updated head of the list
        return head;
    }
}
