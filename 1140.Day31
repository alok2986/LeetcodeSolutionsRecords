1140
1140. Stone Game II
Medium
Topics
Companies
Hint
Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. 

Alice and Bob take turns, with Alice starting first.  Initially, M = 1.

On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).

The game continues until all the stones have been taken.

Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.

 

Example 1:

Input: piles = [2,7,9,4,4]
Output: 10
Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 
Example 2:

Input: piles = [1,2,3,4,5,100]
Output: 104
 

Constraints:

1 <= piles.length <= 100
1 <= piles[i] <= 104


CODE:

public class Solution {
    public int stoneGameII(int[] piles) {
        int n = piles.length;
        
        // Suffix sum array to quickly calculate remaining stones
        int[] suffixSum = new int[n];
        suffixSum[n - 1] = piles[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffixSum[i] = piles[i] + suffixSum[i + 1];
        }
        
        // Memoization table
        int[][] memo = new int[n][n];
        
        // Recursive function with memoization
        return dp(0, 1, suffixSum, memo);
    }
    
    private int dp(int i, int M, int[] suffixSum, int[][] memo) {
        int n = suffixSum.length;
        if (i >= n) {
            return 0; // Base case: no piles left
        }
        if (2 * M >= n - i) {
            return suffixSum[i]; // If we can take all remaining piles
        }
        if (memo[i][M] != 0) {
            return memo[i][M]; // Return already computed result
        }
        
        int maxStones = 0;
        for (int x = 1; x <= 2 * M; x++) {
            int opponentScore = dp(i + x, Math.max(M, x), suffixSum, memo);
            maxStones = Math.max(maxStones, suffixSum[i] - opponentScore);
        }
        
        memo[i][M] = maxStones;
        return maxStones;
    }
}
