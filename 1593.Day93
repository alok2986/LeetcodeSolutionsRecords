1593. Split a String Into the Max Number of Unique Substrings
Medium
Topics
Companies
Hint
Given a string s, return the maximum number of unique substrings that the given string can be split into.

You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "ababccc"
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.
Example 2:

Input: s = "aba"
Output: 2
Explanation: One way to split maximally is ['a', 'ba'].
Example 3:

Input: s = "aa"
Output: 1
Explanation: It is impossible to split the string any further.
 

Constraints:

1 <= s.length <= 16

s contains only lower case English letters.


CODE:
import java.util.HashSet;

public class Solution {
    public int maxUniqueSplit(String s) {
        return backtrack(s, 0, new HashSet<>());
    }

    // Helper function to perform backtracking
    private int backtrack(String s, int start, HashSet<String> uniqueSubstrings) {
        if (start == s.length()) {
            // If we've reached the end of the string, return the number of unique substrings
            return uniqueSubstrings.size();
        }
        
        int maxUnique = 0;
        
        // Try every possible substring starting from 'start'
        for (int end = start + 1; end <= s.length(); end++) {
            String currentSubstring = s.substring(start, end);
            
            // If the current substring is not already in the set, proceed
            if (!uniqueSubstrings.contains(currentSubstring)) {
                uniqueSubstrings.add(currentSubstring);
                
                // Recursively check further splits and update the maximum
                maxUnique = Math.max(maxUnique, backtrack(s, end, uniqueSubstrings));
                
                // Backtrack: remove the current substring from the set
                uniqueSubstrings.remove(currentSubstring);
            }
        }
        
        return maxUnique;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.maxUniqueSplit("ababccc")); // Output: 5
        System.out.println(solution.maxUniqueSplit("aba")); // Output: 2
        System.out.println(solution.maxUniqueSplit("aa")); // Output: 1
    }
}
