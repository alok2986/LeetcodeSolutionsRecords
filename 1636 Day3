1636.Sort array by increasing frequency.
Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.

Return the sorted array.

 

Example 1:

Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.
Example 2:

Input: nums = [2,3,1,3,2]
Output: [1,3,3,2,2]
Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.
Example 3:

Input: nums = [-1,1,-6,4,5,-6,1,4,1]
Output: [5,-1,4,4,-6,-6,1,1,1]

#code 
import java.util.*;

public class Solution {
    public int[] frequencySort(int[] nums) {
        // Step 1: Count the frequency of each number
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Sort based on the frequency and value
        // Use a custom comparator for sorting
        Integer[] numsArray = Arrays.stream(nums).boxed().toArray(Integer[]::new);
        Arrays.sort(numsArray, (a, b) -> {
            int freqCompare = Integer.compare(freqMap.get(a), freqMap.get(b));
            if (freqCompare == 0) {
                return Integer.compare(b, a); // Sort by value in decreasing order
            } else {
                return freqCompare; // Sort by frequency in increasing order
            }
        });

        // Convert the sorted array back to int[]
        return Arrays.stream(numsArray).mapToInt(Integer::intValue).toArray();
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        int[] nums1 = {1, 1, 2, 2, 2, 3};
        System.out.println(Arrays.toString(solution.frequencySort(nums1))); // Output: [3, 1, 1, 2, 2, 2]

        // Example 2
        int[] nums2 = {2, 3, 1, 3, 2};
        System.out.println(Arrays.toString(solution.frequencySort(nums2))); // Output: [1, 3, 3, 2, 2]

        // Example 3
        int[] nums3 = {-1, 1, -6, 4, 5, -6, 1, 4, 1};
        System.out.println(Arrays.toString(solution.frequencySort(nums3))); // Output: [5, -1, 4, 4, -6, -6, 1, 1, 1]
    }
}



//It took 12 milisecods time.
